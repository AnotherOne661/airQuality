1. Define Constants
javascript
Copy code
const API = "YOUR_API_KEY_HERE"; // Replace with your OpenWeatherMap API key
const tbody = document.getElementById("table-body"); // Ensure this matches your HTML
API: A placeholder for your OpenWeatherMap API key. Replace "YOUR_API_KEY_HERE" with your actual API key.
tbody: The variable tbody references the <tbody> element in your HTML. This is where rows will be appended. Make sure there’s an element with id="table-body" in your HTML.
2. Add a Row to the Table
javascript
Copy code
function addRow(institute, component, value, unit, date) {
  const tableRow = document.createElement("tr");
  tableRow.innerHTML = `
    <td>${institute}</td>
    <td>${component}</td>
    <td>${value}</td>
    <td>${unit}</td>
    <td>${date}</td>
  `;
  tbody.appendChild(tableRow);
}
addRow Function: Dynamically creates a new table row (<tr>) with five cells (<td>), one for each parameter: institute, component, value, unit, and date.
appendChild: Adds the new row to the tbody element.
3. Process Air Quality Data
javascript
Copy code
function processAirQualityData(data, institute) {
  const components = data.list[0].components;
  const date = new Date(data.list[0].dt * 1000).toLocaleString(); // Convert Unix timestamp to readable format

  // Iterate over each component and add a row to the table
  for (const [component, value] of Object.entries(components)) {
    addRow(institute, component, value, "µg/m³", date); // Assuming µg/m³ as the unit
  }
}
Input: Takes data (the API response) and the institute name.
components: Extracts air quality components (like CO, NO2, etc.) from the API response.
Date Conversion: Converts the Unix timestamp (data.list[0].dt) to a readable date and time format.
Iterate Components: Loops through each air quality component (e.g., CO, NO2) and calls addRow to add data to the table.
4. Main Function
javascript
Copy code
async function main() {
  // Initialize map
  const map = L.map("map").setView([40.573942, -4.005455], 13);
  const satellite = L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(map);

  // Define marker locations and names
  const markers = [
    { coords: [40.582884, -4.011464], name: "IES Infanta Elena" },
    { coords: [40.378052, -3.656922], name: "IES Madrid Sur" },
    { coords: [40.444775, -3.719944], name: "IES San Isidoro de Sevilla" },
    { coords: [40.352739, -3.696325], name: "IES Ciudad de Los Ángeles" },
    { coords: [40.439698, -3.65676], name: "IES Salvador Dalí" },
  ];

  // Add markers to the map
  markers.forEach(marker => {
    const leafletMarker = L.marker(marker.coords).addTo(map);
    leafletMarker.bindPopup(marker.name);
  });

  // Fetch air quality data for each marker
  for (const marker of markers) {
    try {
      const response = await fetch(
        `https://api.openweathermap.org/data/2.5/air_pollution?lat=${marker.coords[0]}&lon=${marker.coords[1]}&appid=${API}`
      );
      const data = await response.json();
      processAirQualityData(data, marker.name);
    } catch (error) {
      console.error(`Error fetching data for ${marker.name}:`, error);
    }
  }

  // Initialize DataTable after table rows are populated
  $(document).ready(() => {
    $("#myTable").DataTable();
  });
}
Breaking It Down
Map Initialization:

Uses Leaflet.js to create a map centered at specific coordinates.
Adds a satellite view layer using the OpenStreetMap tile service.
Markers Definition:

markers: An array of objects, each containing the coords (latitude and longitude) and name of a marker.
Example: [40.582884, -4.011464] represents IES Infanta Elena.
Adding Markers to Map:

Iterates over the markers array and adds each marker to the map.
bindPopup: Associates a popup displaying the marker's name when clicked.
Fetching Air Quality Data:

For each marker, sends a fetch request to the OpenWeatherMap API for air quality data using its latitude and longitude.
The API response is processed by processAirQualityData to extract and display relevant information in the table.
Error Handling:

If the API call fails for a specific marker, logs an error in the console.
Initialize DataTable:

Uses jQuery and the DataTables plugin to enhance the table with features like sorting, searching, and pagination.
5. Run the Main Function
javascript
Copy code
main();
Calls the main function to execute the above steps.
How the Code Works Together
The map is displayed with markers for different institutes.
When the page loads, the script fetches air quality data for each marker and populates the table.
The table is enhanced with DataTables functionality for user interaction.
If tbody is null, check your HTML structure to ensure id="table-body" exists within the table. Let me know if you need further clarification!






